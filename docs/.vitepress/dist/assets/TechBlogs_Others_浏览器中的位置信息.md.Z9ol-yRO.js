import{_ as e,o as t,c as i,R as l}from"./chunks/framework.geGBmoNB.js";const u=JSON.parse('{"title":"简述浏览器中的 clientTop/Height/X、offsetTop/Height/X、scrollTop/Height/X","description":"","frontmatter":{},"headers":[],"relativePath":"TechBlogs/Others/浏览器中的位置信息.md","filePath":"TechBlogs/Others/浏览器中的位置信息.md"}'),o={name:"TechBlogs/Others/浏览器中的位置信息.md"},h=l('<h1 id="简述浏览器中的-clienttop-height-x、offsettop-height-x、scrolltop-height-x" tabindex="-1">简述浏览器中的 clientTop/Height/X、offsetTop/Height/X、scrollTop/Height/X <a class="header-anchor" href="#简述浏览器中的-clienttop-height-x、offsettop-height-x、scrolltop-height-x" aria-label="Permalink to &quot;简述浏览器中的 clientTop/Height/X、offsetTop/Height/X、scrollTop/Height/X&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p><strong>本人最近在公司中接触到了一个低代码的 BI 可视化项目，因此涉及到很多拖拽相关的知识，难免会与浏览器中元素的宽高距离打交道，在此之前一直对各种宽高距的概念很模糊，故在此已较为精简文字加以总结，以备后续查阅。如有错误的地方也欢迎指正。</strong></p><h2 id="一、width-height" tabindex="-1">一、width/height <a class="header-anchor" href="#一、width-height" aria-label="Permalink to &quot;一、width/height&quot;">​</a></h2><h3 id="_1-clientwidth-clientheight" tabindex="-1">1. clientWidth/clientHeight <a class="header-anchor" href="#_1-clientwidth-clientheight" aria-label="Permalink to &quot;1. clientWidth/clientHeight&quot;">​</a></h3><p><code>clientWidth/clientHeight</code>为元素不包含边框的宽高，也就是元素的内容宽高，因此其计算方式可根据元素<code>box-sizing</code>分为两种情况：</p><ul><li><p>当<code>box-sizing</code>为<code>border-box</code>时:</p><ul><li>clientWidth = width - 左 border - 右 border</li><li>clientHeight = height - 上 border - 下 border</li></ul></li><li><p>当<code>box-sizing</code>为<code>content-box</code>时:</p><ul><li>clientWidth = width + 左 paddig + 右 padding</li><li>clientHeight = height + 上 paddig + 下 padding</li></ul></li></ul><h3 id="_2-offsetwidth-offsetheight" tabindex="-1">2. offsetWidth/offsetHeight: <a class="header-anchor" href="#_2-offsetwidth-offsetheight" aria-label="Permalink to &quot;2. offsetWidth/offsetHeight:&quot;">​</a></h3><p><code>offsetWidth/offsetHeight</code>与<code>clientWidth/clientHeight</code>刚好相反，其为元素总的宽高，即包含边框的宽高，其计算方式也可根据元素<code>box-sizing</code>分为两种情况：</p><ul><li><p>当<code>box-sizing</code>为<code>border-box</code>时:</p><ul><li>offsetWidth = width</li><li>offsetHeight = height</li></ul></li><li><p>当<code>box-sizing</code>为<code>content-box</code>时:</p><ul><li>clientWidth = width + 左 border + 右 border</li><li>clientHeight = height + 上 border + 下 border</li></ul></li></ul><h3 id="_3-scrollwidth-scrollheight" tabindex="-1">3. scrollWidth/scrollHeight： <a class="header-anchor" href="#_3-scrollwidth-scrollheight" aria-label="Permalink to &quot;3. scrollWidth/scrollHeight：&quot;">​</a></h3><p><code>offsetWidth/offsetHeight</code>除了可视内容（<code>clientWidth/clientHeight</code>）以外，还包括由于<code>overflow</code>属性的设置溢出而在屏幕上不可见的内容。因此它也分为两种情况：</p><ul><li><p>当在内容区没有溢出时：</p><ul><li>scrollWidth = clientWidth</li><li>scrollHeight = clientHeight</li></ul></li><li><p>在内容区发生溢出并且设置了<code>overflow:scroll</code>等属性时:</p><ul><li>scrollWidth = clientWidth + 溢出的内容区的宽度</li><li>scrollHeight = clientHeight + 溢出的内容区的高度</li></ul><p><strong>注意这里的宽高也不包含边框</strong></p></li></ul><h2 id="二、left-top" tabindex="-1">二、left/top <a class="header-anchor" href="#二、left-top" aria-label="Permalink to &quot;二、left/top&quot;">​</a></h2><h3 id="_1-clientleft-clienttop" tabindex="-1">1. clientLeft/clientTop: <a class="header-anchor" href="#_1-clientleft-clienttop" aria-label="Permalink to &quot;1. clientLeft/clientTop:&quot;">​</a></h3><p><code>clientLeft/clientTop</code>为元素的左/上边框宽度，即：</p><ul><li>clientLeft = 左 boder</li><li>clientTop = 上 boder</li></ul><h3 id="_2-offsetleft-offsettop" tabindex="-1">2. offsetLeft/offsetTop: <a class="header-anchor" href="#_2-offsetleft-offsettop" aria-label="Permalink to &quot;2. offsetLeft/offsetTop:&quot;">​</a></h3><p><code>offsetLeft/offsetTop</code>为自身边框到最近的带有定位属性的父元素的左/上边框(不含边框)的距离</p><h3 id="_3-scrollleft-scrollheight" tabindex="-1">3. scrollLeft/scrollHeight: <a class="header-anchor" href="#_3-scrollleft-scrollheight" aria-label="Permalink to &quot;3. scrollLeft/scrollHeight:&quot;">​</a></h3><p><code> scrollLeft/scrollHeight</code> 为内容区到溢出部分左边或上边的距离(包括边框),即滚动条滚动距离</p><ul><li>scrollLeft = 左 boder + 溢出的内容区的宽度</li><li>scrollTop = 上 boder + 溢出的内容区的高度</li></ul><h2 id="三、x-y" tabindex="-1">三、X/Y <a class="header-anchor" href="#三、x-y" aria-label="Permalink to &quot;三、X/Y&quot;">​</a></h2><ul><li><p><code>ScreenX/ScreenY</code>: 距离屏幕左/上边的距离</p></li><li><p><code>LayerX/LayerY</code>: 距离最近的带有定位属性的父元素左/上边的距离(包括父元素边框)</p></li><li><p><code>ClientX/ClientY</code>: 距离浏览器视口左/上边的距离，不考虑溢出部分的宽/高</p></li><li><p><code>PageX/PageY</code>: 距离浏览器视口左边的距离(<code>ClientX/ClientY</code>) + 溢出部分的距离(滚动条滚动的距离)</p></li><li><p><code>OffsetX/OffsetY</code>: 距离当前容器左边的距离(不包括容器的边框)</p></li></ul>',24),c=[h];function d(a,r,s,n,f,p){return t(),i("div",null,c)}const _=e(o,[["render",d]]);export{u as __pageData,_ as default};
